{"version":3,"sources":["SimplePos.ts","WordChip.tsx","Toggles.tsx","TagCab.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SimplePos","WordChip","word","type","visible","colour","onClick","className","style","backgroundColor","color","borderRadius","padding","margin","height","fontSize","lineHeight","display","userSelect","title","makeLabel","label","verticalAlign","marginLeft","marginRight","makeBall","width","backgroundImage","Toggles","toggles","onChange","map","toggle","i","marginTop","marginBottom","key","paddingLeft","paddingRight","paddingTop","paddingBottom","border","pos","TagCab","boxShadow","textAlign","position","alignItems","justifyContent","zIndex","getColour","Adjective","Adverb","Noun","Pronoun","Verb","Conjunctives","Determiner","Preposition","simpleTag","words","tokens","Lexed","lexer","tagObj","Tag","flatMap","initial","smooth","zip","tags","tag","tp","startsWith","endsWith","Other","App","useState","inputText","setInputText","tagged","setTagged","Object","entries","posToggles","setPosToggles","togglePos","toggledToggles","t","id","ev","target","value","cols","rows","resize","length","find","p","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6df9b87.chunk.js","sourcesContent":["enum SimplePos {\n    Verb = \"Vrb\",\n    Adjective = \"Adj\",\n    Noun = \"Nn\",\n    Adverb = \"Avb\",\n    Pronoun = \"Pnn\",\n    Preposition = \"Ppn\",\n    Conjunctives = \"Cjs\",\n    Determiner = \"Dtr\",\n    Other = \"Ukn\"\n  }\n\nexport default SimplePos;\n","import React from 'react';\nimport SimplePos from './SimplePos';\n\ninterface WordChipProp {\n    word?: string,\n    type: SimplePos,\n    colour: string,\n    visible?: boolean,\n    onClick?: (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n}\n\nconst WordChip = ({word, type, visible, colour, onClick}: WordChipProp) => (\n        <div\n            className={type}\n            style={{\n                backgroundColor: colour,\n                color: visible ? 'white' : colour,\n                borderRadius: '25px',\n                padding: '0 5px',\n                margin: '0 2px',\n                height: '40px',\n                fontSize: '20px',\n                lineHeight: '40px',\n                display: 'inline-block',\n                userSelect: 'none',\n            }}\n            onClick={onClick}\n            title={type}\n        >\n            {word}\n        </div>\n)\n\nexport default WordChip;\n","import React from 'react'\nimport { TogglesT } from './App'\nimport SimplePos from './SimplePos'\n\ninterface TogglesProp {\n    toggles: TogglesT;\n    onChange: (pos: SimplePos) => void\n}\n\nconst makeLabel = (label: string, visible: boolean) => (\n    <>\n        <div\n            style={{\n                verticalAlign: 'middle',\n                display: 'inline-block',\n                lineHeight: 'normal',\n                marginLeft: '2px',\n                marginRight: '2px',\n                userSelect: 'none',\n                fontSize: '20px',\n                color: visible ? 'white' : 'black',\n            }}\n        >\n            {label}\n        </div>\n    </>\n)\n\nconst makeBall = (visible: boolean, colour: string) => (\n<div\n        style={{\n            borderRadius: '50%',\n            width: '25px',\n            height: '25px',\n            backgroundImage: visible\n                ? 'radial-gradient(circle at 50% 50%, #78e1d0, #43c0a3 71%)'\n                : 'radial-gradient(circle at 50% 50%, #ffa58b, #ea592f 71%)',\n            display: 'inline-block',\n            verticalAlign: 'middle',\n        }}\n    >\n    </div>\n)\n\nconst ordered = (label: string, visible: boolean, colour: string) => (\n    visible \n        ? <>{makeLabel(label, visible)} {makeBall(visible, colour)}</> \n        : <>{makeBall(visible, colour)} {makeLabel(label, visible)}</>\n)\n\nconst Toggles = ({ toggles, onChange }: TogglesProp) => (\n    <>\n        {toggles.map((toggle, i) => (\n            <div\n                style={{\n                    display: 'inline-block',\n                    userSelect: 'none',\n                    marginTop: '5px',\n                    marginBottom: '5px',\n                }}\n                key={i}\n            >\n                <div\n                    key={i}\n                    style={{\n                        height: '25px',\n                        lineHeight: '25px',\n                        paddingLeft: '5px',\n                        paddingRight: '5px',\n                        paddingTop: '5px',\n                        paddingBottom: '5px',\n                        backgroundColor: toggle.visible ? toggle.colour : 'white',\n                        display: 'inline-block',\n                        borderRadius: '17.5px',\n                        border: toggle.visible ? `1px solid ${toggle.colour}` : '1px solid black',\n                        marginLeft: '2px',\n                        marginRight: '2px',\n                    }}\n                    onClick={() => onChange(toggle.pos)}\n                >\n                    {ordered(toggle.label, toggle.visible, toggle.colour)}\n                </div>\n            </div>\n        ))}\n    </>\n)\n\nexport default Toggles\n","import React from 'react'\n\ninterface TagCabI {\n    onClick: (ev: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n}\n\nconst TagCab = ({onClick}: TagCabI) => (\n    <div\n        onClick={onClick}\n        style={{\n            borderRadius: '50%',\n            userSelect: 'none',\n            width: '90px',\n            height: '90px',\n            boxShadow: '0 10px 15px 0 rgba(67, 192, 163, 0.25)',\n            border: 'solid 2px #252e3b',\n            backgroundImage: 'radial-gradient(circle at 50% 50%, #78e1d0, #43c0a3 71%)',\n            textAlign: 'center',\n            color: 'white',\n            fontSize: '30px',\n            display: 'flex',\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginLeft: '450px',\n            marginTop: '-45px',\n            zIndex: 5,\n        }}\n    >\n        Tag\n    </div>\n)\n\nexport default TagCab\n","import React, { useState } from 'react';\nimport WordChip from './WordChip';\nimport SimplePos from './SimplePos';\nimport './global.css'\nimport Toggles from './Toggles';\nimport TagCab from './TagCab';\nimport { Lexed } from \"lexed\";\nimport { Tag } from \"en-pos\";\nimport { zip, flatMap } from \"lodash\";\n\ntype TaggedWords = [string | undefined, SimplePos]\n// type Toggle = [string, SimplePos, boolean]\ninterface ToggleI {\n  pos: SimplePos;\n  label: string;\n  visible: boolean;\n  colour: string;\n}\nexport type TogglesT = ToggleI[]\n\nconst getColour = (pos: SimplePos): string => {\n  switch (pos) {\n    case (SimplePos.Adjective): {\n      return '#43546a'\n    }\n    case (SimplePos.Adverb): {\n      return '#4472c5'\n    }\n    case (SimplePos.Noun): {\n      return '#70ac46'\n    }\n    case (SimplePos.Pronoun): {\n      return '#5b9bd5'\n    }\n    case (SimplePos.Verb): {\n      return '#ed7d32'\n    }\n    case (SimplePos.Conjunctives): {\n      return '#ffc000'\n    }\n    case (SimplePos.Determiner): {\n      return '#f2ae72'\n    }\n    case (SimplePos.Preposition): {\n      return '#ea592f'\n    }\n    default: {\n      return '#43464B'\n    }\n  }\n}\n\nconst simplify = (tag?: string) => {\n  if (tag?.startsWith(\"NN\")) {\n    return SimplePos.Noun;\n  } else if (tag?.startsWith(\"JJ\")) {\n    return SimplePos.Adjective;\n  } else if (tag?.startsWith(\"VB\")) {\n    return SimplePos.Verb;\n  } else if (tag?.startsWith(\"RB\")) {\n    return SimplePos.Adverb;\n  } else if (tag?.startsWith(\"PR\")) {\n    return SimplePos.Pronoun;\n  } else if (tag?.startsWith(\"IN\")) {\n    return SimplePos.Preposition\n  } else if (tag?.startsWith(\"CC\")) {\n    return SimplePos.Conjunctives\n  } else if (tag?.endsWith(\"DT\")) {\n    return SimplePos.Determiner\n  } else {\n    return SimplePos.Other;\n  }\n};\n\nconst tag = (words: string): [string?, string?][] => {\n  const tokens = new Lexed(words).lexer().tokens;\n  const tagObj = new Tag(flatMap(tokens)).initial().smooth();\n  return zip(tagObj.tokens, tagObj.tags);\n};\n\nconst simpleTag = (words: string): TaggedWords[] => {\n  const tagged = tag(words)\n  return tagged.map(tp => {\n    return [tp[0], simplify(tp[1])]\n  })\n}\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"This is the default input text.\")\n  const [tagged, setTagged] = useState([] as TaggedWords[])\n  const [posToggles, setPosToggles] = useState(Object\n    .entries(SimplePos)\n    .map(([label, pos]) => {\n      return {\n        pos,\n        label,\n        visible: true,\n        colour: getColour(pos)\n      } as ToggleI\n    })\n  )\n\n  const change = () => {\n    setTagged(simpleTag(inputText))\n  }\n\n  const togglePos = (pos: SimplePos) => {\n    const toggledToggles = posToggles.map(t => {\n      if (t.pos === pos) {\n        return {\n          ...t,\n          visible: !t.visible\n        }\n      } else {\n        return t\n      }\n    })\n    setPosToggles(toggledToggles)\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          width: '700px',\n          margin: 'auto',\n          marginBottom: '50px',\n        }}\n      >\n        <textarea\n          id='input-area'\n          onChange={(ev) => setInputText(ev.target.value)}\n          value={inputText}\n          cols={80}\n          rows={10}\n          style={{\n            resize: 'none',\n            zIndex: -1,\n            fontSize: '22px',\n            width: '500px',\n          }}\n        ></textarea>\n        <br />\n        <TagCab\n          onClick={change}\n        />\n      </div>\n      <br />\n      { tagged.length > 0 ? <div\n        style={{\n          width: '700px',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          textAlign: 'center',\n          borderRadius: '50px',\n          border: '1px dashed #252e3b',\n          marginBottom: '40px',\n        }}\n      >\n        {tagged.map(([word, pos], i) => (\n          <WordChip\n            key={i}\n            word={word}\n            type={pos}\n            visible={posToggles.find((p: ToggleI) => p.pos === pos)?.visible}\n            colour={getColour(pos)}\n            onClick={() => togglePos(pos)}\n          />\n        ))}\n      </div> : null}\n      <div\n        style={{\n          width: '700px',\n          margin: 'auto',\n          textAlign: 'center',\n        }}\n      >\n        <Toggles\n          toggles={posToggles}\n          onChange={togglePos}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}